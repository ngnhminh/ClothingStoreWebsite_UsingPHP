document.addEventListener("DOMContentLoaded", function () {
    // L·∫•y danh s√°ch ƒë∆°n h√†ng
    const orderRows = document.querySelectorAll("#orders-container tr");
    const modal = document.getElementById("orderModal");
    const closeBtn = document.querySelector(".close-btn");
    const filterButtons = document.querySelectorAll(".status-btn");
    const saveButton = document.querySelector(".save-btn"); // N√∫t L∆∞u
    const cancelButton = document.querySelector(".cancel-btn"); // N√∫t H·ªßy
    const statusText = document.querySelector(".status-text"); // Tr·∫°ng th√°i ƒë∆°n h√†ng trong modal
    const statusToggle = document.querySelector(".switch input"); // Switch toggle
    const restoreBtn = document.querySelector(".restore-btn"); 
    const switchContainer = modal.querySelector(".switch"); // L·∫•y div ch·ª©a switch
    
    // M·ªü modal khi click v√†o "Th√¥ng tin ƒë∆°n"
    orderRows.forEach((row) => {
        row.querySelector("td:last-child a").addEventListener("click", function (event) {
            event.preventDefault();
            openModal(row);
        });
    });

    // ƒê√≥ng modal khi b·∫•m n√∫t ƒë√≥ng
    closeBtn.addEventListener("click", closeModal);
    window.addEventListener("click", function (event) {
        if (event.target === modal) {
            closeModal();
        }
    });
    document.querySelectorAll(".order-info").forEach(cell => {
        cell.addEventListener("click", function () {
            const row = this.closest("tr");
            const orderId = row.dataset.orderId; // L·∫•y order_id t·ª´ data attribute

            console.log("orderId nh·∫≠n ƒë∆∞·ª£c:", orderId);
            console.log("Row element:", row);

            if (!orderId || isNaN(orderId)) {
                console.error("‚ùå L·ªói: orderId kh√¥ng h·ª£p l·ªá!", orderId);
                return;
            }

            openModal(orderId, row);
        });
    });
    function openModal(orderId, row) {
        fetch(`http://localhost/ClothingStore/app/controllers/ordermanagerment.controller.php?order_id=${orderId}`)
            .then(response => response.json())
            .then(data => {
                if (!Array.isArray(data) || data.length === 0) {
                    console.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë∆°n h√†ng!");
                    return;
                }
    
                console.log("üìå D·ªØ li·ªáu t·ª´ server:", data);
                
                const customerName = data[0].customer_name;
                let discount = 0, subtotal = 0, shippingFee = 0, paymentMethod = '', orderStatus = '';
    
                const itemsHTML = data.map(item => {
                    discount += parseFloat(item.discount) || 0;
                    subtotal += parseFloat(item.total_price) || 0;
                    shippingFee = parseFloat(item.shipping_fee) || 0;
                    paymentMethod = item.payment_method;
                    orderStatus = item.order_status;
    
                    return `
                        <div class="item-row">
                            <div class="product-info">
                                <div class="item-detail">
                                    <div class="item-name">${item.product_name}</div>
                                    <div class="item-sizes">Size: ${item.size} &nbsp; Sl: ${item.soluong}</div>
                                </div>
                            </div>
                            <div class="item-discount">-${item.discount}%</div>
                            <div id="bill-price">
                                <del class="item-original-price">${item.product_price.toLocaleString()}ƒë</del>
                                <div class="item-price">${item.total_price.toLocaleString()}ƒë</div>
                            </div>
                        </div>
                        <div class="divider"></div>
                    `;
                }).join('');
    
                document.getElementById('modal-items').innerHTML = itemsHTML;
                document.getElementById('customer-name').innerText = customerName;
                document.getElementById('discount').innerText = discount.toLocaleString() + "ƒë";
                document.getElementById('subtotal').innerText = subtotal.toLocaleString() + "ƒë";
                document.getElementById('shipping-fee').innerText = shippingFee.toLocaleString() + "ƒë";
                document.getElementById('payment-method').innerText = paymentMethod;
                document.getElementById('total-price').innerText = (subtotal - discount + shippingFee).toLocaleString() + "ƒë";
    
                // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
                const statusText = document.getElementById('order-status');
                const switchContainer = document.querySelector('.status-toggle');
                const statusToggle = document.querySelector('.status-toggle input');
                const cancelButton = document.querySelector('.cancel-btn');
                const restoreBtn = document.querySelector('.restore-btn');
    
                statusText.textContent = orderStatus;
                switch (orderStatus) {
                    case "ƒê√£ x·ª≠ l√Ω":
                        statusText.style.color = "green";
                        switchContainer.style.display = "flex";
                        statusToggle.checked = true;
                        cancelButton.style.display = "inline";
                        restoreBtn.style.display = "none";
                        break;
                    case "Ch∆∞a x·ª≠ l√Ω":
                        statusText.style.color = "orange";
                        switchContainer.style.display = "flex";
                        statusToggle.checked = false;
                        cancelButton.style.display = "inline";
                        restoreBtn.style.display = "none";
                        break;
                    case "ƒê√£ h·ªßy":
                        statusText.style.color = "red";
                        switchContainer.style.display = "none";
                        cancelButton.style.display = "none";
                        restoreBtn.style.display = "inline";
                        break;
                    default:
                        statusText.style.color = "black";
                        switchContainer.style.display = "none";
                        statusToggle.checked = false;
                }
    
                // ƒê√°nh d·∫•u h√†ng ƒë∆∞·ª£c ch·ªçn
                document.querySelectorAll(".order-table tbody tr").forEach(tr => tr.classList.remove("selected"));
                row.classList.add("selected");
    
                // Hi·ªÉn th·ªã modal
                document.getElementById('orderModal').style.display = "flex";
            })
            .catch(error => console.error("‚ùå L·ªói fetch:", error));
    }
    

    function closeModal() {
        modal.style.display = "none";
    }

    // Khi b·∫•m n√∫t "H·ªßy"
    cancelButton.addEventListener("click", function () {
        statusText.textContent = "ƒê√£ h·ªßy";
        statusText.style.color = "red";
        switchContainer.style.display = "none";
        this.style.display = "none";
        restoreBtn.style.display = "flex";

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i trong b·∫£ng
        const selectedRow = document.querySelector(".order-table tr.selected");
        if (selectedRow) {
            selectedRow.querySelector(".status").textContent = "ƒê√£ h·ªßy";
            selectedRow.querySelector(".status").style.color = "red";
        }

        // G·ª≠i AJAX c·∫≠p nh·∫≠t tr·∫°ng th√°i (n·∫øu c√≥ backend)
        const orderId = selectedRow ? selectedRow.cells[0].textContent.trim() : null;
        if (orderId) {
            fetch("http://localhost/ClothingStore/api/update-order.php", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ orderId: orderId, status: "ƒê√£ h·ªßy" }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    console.log("ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy!");
                } else {
                    alert("L·ªói khi h·ªßy ƒë∆°n h√†ng!");
                }
            })
            .catch(error => console.error("L·ªói:", error));
        }
        // closeModal()
    });
    
    // // Khi ch·ªçn kh√¥i ph·ª•c ƒë∆°n h√†ng
    restoreBtn.addEventListener("click", function () {
        const selectedRow = document.querySelector(".order-table tr.selected");
        if (!selectedRow) return;
    
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i trong modal
        statusText.textContent = "Ch∆∞a x·ª≠ l√Ω"; 
        statusText.style.color = "orange"; // ƒê·ªïi m√†u cam gi·ªëng tr·∫°ng th√°i ban ƒë·∫ßu
        switchContainer.style.display = "flex"; // Hi·ªán l·∫°i switch
        statusToggle.checked = false; 
    
        // Hi·ªán l·∫°i n√∫t H·ªßy, ·∫©n n√∫t Kh√¥i ph·ª•c
        cancelButton.style.display = "inline";  
        restoreBtn.style.display = "none"; 
    
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i trong b·∫£ng
        selectedRow.querySelector(".status").textContent = "Ch∆∞a x·ª≠ l√Ω";
        selectedRow.querySelector(".status").style.color = "orange";
    });

    saveButton.addEventListener("click", function () {
        const newStatus = statusToggle.checked ? "ƒê√£ x·ª≠ l√Ω" : "Ch∆∞a x·ª≠ l√Ω";

        // N·∫øu tr·∫°ng th√°i hi·ªán t·∫°i l√† "ƒê√£ h·ªßy", gi·ªØ nguy√™n
        if (statusText.textContent === "ƒê√£ h·ªßy") {
            statusText.style.color = "red";
            statusToggle.style.display = "none";
        } else {
            statusText.textContent = newStatus;
            statusText.style.color = newStatus === "ƒê√£ x·ª≠ l√Ω" ? "green" : "orange";
            statusToggle.style.display = "inline-block"; 
        }
        
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i trong b·∫£ng
        const selectedRow = document.querySelector(".order-table tr.selected");
        if (selectedRow) {
            const currentStatus = selectedRow.querySelector(".status").textContent.trim();
        
            // N·∫øu ƒë∆°n h√†ng ƒëang l√† "ƒê√£ h·ªßy", gi·ªØ nguy√™n
            if (currentStatus === "ƒê√£ h·ªßy") {
                selectedRow.querySelector(".status").style.color = "red";
            } else {
                selectedRow.querySelector(".status").textContent = newStatus;
                selectedRow.querySelector(".status").style.color = newStatus === "ƒê√£ x·ª≠ l√Ω" ? "green" : "orange";
            }
        }

        // G·ª≠i AJAX c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng (n·∫øu c√≥ backend)
        const orderId = selectedRow ? selectedRow.cells[0].textContent.trim() : null;
        if (orderId) {
            fetch("http://localhost/ClothingStore/api/update-order.php", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ orderId: orderId, status: newStatus }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    console.log("C·∫≠p nh·∫≠t ƒë∆°n h√†ng th√†nh c√¥ng!");
                } else {
                    alert("L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng!");
                }
            })
            .catch(error => console.error("L·ªói:", error));
        }

        // ƒê√≥ng modal
        closeModal();
    });


    document.querySelector(".switch input").addEventListener("change", function () {
        const selectedRow = document.querySelector(".order-table tr.selected");
        if (!selectedRow) return;

        if (this.checked) {
            statusText.textContent = "ƒê√£ x·ª≠ l√Ω";
            statusText.style.color = "green";
        } else {
            statusText.textContent = "Ch∆∞a x·ª≠ l√Ω";
            statusText.style.color = "orange";
        }
    });
    
    let activeFilter = null; // L∆∞u tr·∫°ng th√°i n√∫t ƒëang ƒë∆∞·ª£c ch·ªçn

    filterButtons.forEach((button) => {
        button.addEventListener("click", function () {
            const words = this.textContent.trim().split(" "); 
            const filter = words.slice(0, 2).join(" "); // L·∫•y 2 t·ª´ ƒë·∫ßu ti√™n
    
            // N·∫øu b·∫•m l·∫°i c√πng n√∫t ƒëang ch·ªçn -> Hi·ªÉn th·ªã t·∫•t c·∫£
            if (activeFilter === filter) {
                orderRows.forEach((row) => row.style.display = ""); // Reset b·ªô l·ªçc
                activeFilter = null; // ƒê·∫∑t l·∫°i tr·∫°ng th√°i
            } else {
                orderRows.forEach((row) => {
                    const status = row.querySelector(".status").textContent.trim();
                    row.style.display = filter === "T·∫•t c·∫£" || status.includes(filter) ? "" : "none";
                });
                activeFilter = filter; // L∆∞u tr·∫°ng th√°i n√∫t ƒë√£ ch·ªçn
            }
        });
    });

    const startDateInput = document.querySelector(".date-start");
    const endDateInput = document.querySelector(".date-end");
    const searchButton = document.querySelector(".search-btn"); 
  

    searchButton.addEventListener("click", function () {

        const isDateMissing  = !startDateInput.value || !endDateInput.value;
        if (isDateMissing ) {
            alert("Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß kho·∫£ng th·ªùi gian!");
            return;
        }
        // Chuy·ªÉn input YYYY-MM-DD th√†nh Date object (00:00:00 v√† 23:59:59 ƒë·ªÉ bao tr·ªçn ng√†y)
        const startDate = new Date(startDateInput.value + "T00:00:00");
        const endDate = new Date(endDateInput.value + "T23:59:59");

        document.querySelectorAll(".order-table tbody tr").forEach((row) => {
            const orderDateText = row.querySelector("td:nth-child(4)").textContent.trim(); // L·∫•y ng√†y c√≥ gi·ªù t·ª´ b·∫£ng
            
            const orderDate = parseDateTime(orderDateText); // Chuy·ªÉn th√†nh Date object

            // So s√°nh ng√†y ƒë·∫∑t h√†ng c√≥ n·∫±m trong kho·∫£ng ƒë√£ ch·ªçn kh√¥ng
            row.style.display = (orderDate >= startDate && orderDate <= endDate) ? "" : "none";
        });
    });
    // Chuy·ªÉn ƒë·ªïi t·ª´ "dd/mm/yyyy hh:mm:ss" sang Date object
    function parseDateTime(dateTimeStr) {
        const [datePart, timePart] = dateTimeStr.split(" "); // T√°ch "dd/mm/yyyy" v√† "hh:mm:ss"
        const [day, month, year] = datePart.split("/"); // T√°ch ng√†y, th√°ng, nƒÉm
        const [hours, minutes] = timePart ? timePart.split(":") : ["00", "00"]; // T√°ch gi·ªù, ph√∫t, gi√¢y (m·∫∑c ƒë·ªãnh 00:00:00)

        return new Date(year, month - 1, day, hours, minutes);
    }
});
